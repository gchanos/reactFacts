

// ================

// Lesson#1
// ReactDOM.render(<p>Hello, I am a piece of React code!</p>, document.querySelector("#root"));


// ================

// Lesson#2
// ReactDOM.render(<ul>
//     <li>Item#1</li>
//     <li>Item#2</li>
//     </ul>, document.querySelector("#root"));


// ================

// Lesson#3: React is Composable!
//     function MainContent() {
//         return (
//             <h1>I'm learning React!</h1>
//         )
//     }
// ReactDOM.render(
//     <MainContent />,
//     document.querySelector("#root"));

// ================

// Lesson#4: 
// A way to write the first line of code from lesson 1 imperatively using just Vanilla JS:

// const h1 = document.createElement("h1")
// h1.textContent = "This is an imperative way to program"
// h1.className = "header"
// document.getElementById("root").append(h1)

// ================

// Lesson#5:  JSX
// JSX is the syntax that the facebook team created and the one that provides React with JS objects it can interpret and then render 
// as HTML content.

// const page = (
//     <div>
//         <h1 className="header">This is JSX</h1>
//         <p>This is a paragraph</p>
//     </div>
// )

// console.log(page)
// This is what the console would log:
// {type: "div", 
    // key: null, 
    // ref: null, 
    // props: {children: [{type: "h1",
        //                 key: null,
        //                 ref: null, 
        //                 props: {className: "header", children: "This is JSX"},
        //                 _owner: null, 
        //                 _store: {}}
        //                 ,

        //                 {type: "p", 
        //                 key: null, 
        //                 ref: null, 
        //                 props: {children: "This is a paragraph"},
        //                 _owner: null, 
        //                 _store: {}}
    //                   ]}  
    // , 
    // _owner: null,
    // _store: {}}
    // }

// ReactDOM.render(
//     page,
//     document.getElementById("root")
// )

// Exercise: 

// const nav = (
//     <nav>
//         <h1>ReactMaster</h1>
//         <ul>
//             <li>Pricing</li>
//             <li>About</li>
//             <li>Contact</li>
//         </ul>
//     </nav>
//     )

// ReactDOM.render(nav, document.getElementById("root"));


// ================

// Lesson#6

// if CDNs aren't installed on our HTML we have to import the libraries through JS, like so:

// import React from "react";
// import ReactDOM from "react-dom";

// const sample = (
//     <div>
//         <h1>Welcome to my page!</h1>
//         <p> Lorem ipsum dolor sit amet consectetur adipisicing elit. Tenetur, iste?
//         </p>
//         <ul>
//             <li>Item1</li>
//             <li>Item2</li>
//             <li>Item3</li>
//         </ul>
//     </div>
// )

// document.getElementById("root").append(JSON.stringify(sample));

// ReactDOM.render(sample, document.getElementById("root"));

// The browser displays an object instead of the div.


// ================

// Lesson#7: Challenge #1, create an static HTML page in React

// const staticPage = (
//     <div>
//         <img src="./react-logo.png" alt="React logo" width="50vw"></img>
//         <h1>Fun facts about React</h1>
//         <ul>
//             <li><p>Was first released in 2013</p></li>
//             <li><p>Was originally created by Jordan Walke</p></li>
//             <li><p>Has well over 100K stars on Github</p></li>
//             <li><p>Is maintained by Facebook</p></li>
//             <li><p>Powers thousands of enterprise apps, including mobile apps</p></li>
//         </ul>
//     </div>
// )

// ReactDOM.render( staticPage
//     , document.getElementById("root"));


// ================

// Lesson#8: Pop Quiz!

// 1. Why do we need to `import React from "react"` in our files?
//    If we are not using the HTML CDNs, the browser will not recognize JSX or any React code line.

// 2. If I were to console.log(page) in index.js, what would show up?
//    An object would show up.

// 3. What's wrong with this code:
// ```
// const page = (
//     <h1>Hello</h1>
//     <p>This is my website!</p>
// )
// ```

// The variable can only contain one parent element, and this one has two.


// 4. What does it mean for something to be "declarative" instead of "imperative"?
//    Declarative means that you tell the computer what to do and then it interprets how to perform that instruction, while 
//    imperative is when you specify how exactly to perform the task.

// 5. What does it mean for something to be "composable"?
//    Composable means that it allows you to create your own components.



// ================

// Lesson#9: Custom components.

/**
Challenge: 

Part 1: Create a page of your own using a custom Page component

It should return an ordered list with the reasons why you're
excited to be learning React :)

Render your list to the page

Part 2: 
- Add a `header` element with a nested `nav` element. Inside the `nav`,
  include a `img` element with the image of the React logo inside
  (src="./react-logo.png") and make sure to set the width to something
  more manageable so it doesn't take up the whole screen
- Add an `h1` with some text describing the page. (E.g. "Reasons
  I'm excited to learn React"). Place it above the ordered list.
- Add a `footer` after the list that says: 
    "© 20xx <last name here> development. All rights reserved."

 */


// function PracticePage () {
//     return (
//         <div>
//         <header>
//             <nav>
//             <img src="./react-logo.png" alt="React logo" width="50vw" />
//             </nav>
//         </header>
//         <h1>Reasons I am excited to learning React!</h1>
//         <ol>
//             <li>It's fun to use</li>
//             <li>It's a very hireable skill</li>
//             <li>I will know a lot more about coding</li>
//             <li>I will be able to do lots of kinds of projects with it</li>
//         </ol>
//         <footer>
//             <p>© 2022 Chan's Development. All rights reserved.</p>
//         </footer>
//         </div>
//     )
// }

// ReactDOM.render(<PracticePage />, document.getElementById("root"));


// ================

// Lesson#10: Custom components Quiz!

// Quiz!

// 1. What is a React component?
//    A React component is an independent and reusale bit of code that serve the same purpose as a
//    JS function, but works in isolation and return HTML.

// 2. What's wrong with this code?
// ```
// function myComponent() {
//     return (
//         <small>I'm tiny text!</small>
//     )
// }
// ```

//    This code does not follow Pascal casing. 

// 3. What's wrong with this code?
// ```
// function Header() {
//     return (
//         <header>
//             <nav>
//                 <img src="./react-logo.png" width="40px" />
//             </nav>
//         </header>
//     )
// }

// ReactDOM.render(Header(), document.getElementById("root"))
// ```

//    This code does not follow the correct notation when calling it within the ReactDOM.render global function.




// ================

// Lesson#10: Parent and child components.

/*
Mini Challenge:
Move the `header` element from Page into 
its own component called "Header"

#2
- Move the `footer` into its own component called "Footer" 
  and render that component inside the Page component.
- Move the `h1` and `ol` together into another component
  called "MainContent" and render inside Page as well.

#3

- Add an `ul` inside the Header's `nav` and create
  the following `li`s: "Pricing", "About", & "Contact"

#4
- Using flexbox, line up the nav items horizontally, and
  put them inline with the React logo.
*/